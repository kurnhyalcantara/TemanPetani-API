// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	model "github.com/kurnhyalcantara/TemanPetani-API/apis/users/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepoInterface type
type UserRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: core
func (_m *UserRepo) Create(core *model.CreateUser) error {
	ret := _m.Called(core)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.CreateUser) error); ok {
		r0 = rf(core)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ID
func (_m *UserRepo) Delete(ID uint) {
	_m.Called(ID)
}

// Get provides a mock function with given fields: ID
func (_m *UserRepo) Get(ID uint) (*model.User, error) {
	ret := _m.Called(ID)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.User, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.User); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: limit, offset
func (_m *UserRepo) GetAll(limit int, offset uint) ([]*model.User, error) {
	ret := _m.Called(limit, offset)

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, uint) ([]*model.User, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, uint) []*model.User); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, uint) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ID, core
func (_m *UserRepo) Update(ID uint, core *model.User) error {
	ret := _m.Called(ID, core)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *model.User) error); ok {
		r0 = rf(ID, core)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
